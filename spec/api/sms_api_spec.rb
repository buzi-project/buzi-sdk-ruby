=begin
#Swagger Petstore - OpenAPI 3.0

#This is a sample Pet Store Server based on the OpenAPI 3.0 specification.  You can find out more about Swagger at [https://swagger.io](https://swagger.io). In the third iteration of the pet store, we've switched to the design first approach! You can now help us improve the API whether it's by making changes to the definition itself or to the code. That way, with time, we can improve the API in general, and expose some of the new features in OAS3.  _If you're looking for the Swagger 2.0/OAS 2.0 version of Petstore, then click [here](https://editor.swagger.io/?url=https://petstore.swagger.io/v2/swagger.yaml). Alternatively, you can load via the `Edit > Load Petstore OAS 2.0` menu option!_  Some useful links: - [The Pet Store repository](https://github.com/swagger-api/swagger-petstore) - [The source API definition for the Pet Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)

The version of the OpenAPI document: 1.0.0
Contact: edson@michaque.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.1.1-SNAPSHOT

=end

require 'spec_helper'
require 'json'

# Unit tests for Buzi::V1::SmsApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'SmsApi' do
  before do
    # run before each test
    @api_instance = Buzi::V1::SmsApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of SmsApi' do
    it 'should create an instance of SmsApi' do
      expect(@api_instance).to be_instance_of(Buzi::V1::SmsApi)
    end
  end

  # unit tests for cancel_message
  # Cancel a message
  # Returns a single pet
  # @param message_id ID of pet to return
  # @param [Hash] opts the optional parameters
  # @return [Message]
  describe 'cancel_message test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_message
  # Create Message
  # Update an existing pet by Id
  # @param create_message_input Update an existent pet in the store
  # @param [Hash] opts the optional parameters
  # @return [Message]
  describe 'create_message test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_pricing
  # Create network price
  # Returns a single pet
  # @param network_id 
  # @param [Hash] opts the optional parameters
  # @return [Message]
  describe 'create_pricing test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_message
  # Deletes a message
  # delete a message
  # @param message_id Pet id to delete
  # @param [Hash] opts the optional parameters
  # @option opts [String] :api_key 
  # @return [Error]
  describe 'delete_message test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_message
  # Get message
  # Returns a single pet
  # @param message_id ID of pet to return
  # @param [Hash] opts the optional parameters
  # @return [Message]
  describe 'get_message test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_network
  # Get network
  # Returns a single pet
  # @param network_id 
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :country_code ID of pet to return
  # @return [Network]
  describe 'get_network test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_pricing
  # List network rates
  # Returns a single pet
  # @param network_id 
  # @param [Hash] opts the optional parameters
  # @return [Array<Pricing>]
  describe 'get_pricing test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for list_messages
  # List messages
  # Update an existing pet by Id
  # @param [Hash] opts the optional parameters
  # @option opts [String] :inbox 
  # @option opts [String] :status 
  # @return [Array<Message>]
  describe 'list_messages test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for list_networks
  # List networks
  # Returns a single pet
  # @param [Hash] opts the optional parameters
  # @option opts [String] :country_code ID of pet to return
  # @return [Array<Network>]
  describe 'list_networks test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for send_message
  # Sends a message
  # Returns a single pet
  # @param message_id ID of pet to return
  # @param [Hash] opts the optional parameters
  # @return [Message]
  describe 'send_message test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
