=begin
#Swagger Petstore - OpenAPI 3.0

#This is a sample Pet Store Server based on the OpenAPI 3.0 specification.  You can find out more about Swagger at [https://swagger.io](https://swagger.io). In the third iteration of the pet store, we've switched to the design first approach! You can now help us improve the API whether it's by making changes to the definition itself or to the code. That way, with time, we can improve the API in general, and expose some of the new features in OAS3.  _If you're looking for the Swagger 2.0/OAS 2.0 version of Petstore, then click [here](https://editor.swagger.io/?url=https://petstore.swagger.io/v2/swagger.yaml). Alternatively, you can load via the `Edit > Load Petstore OAS 2.0` menu option!_  Some useful links: - [The Pet Store repository](https://github.com/swagger-api/swagger-petstore) - [The source API definition for the Pet Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)

The version of the OpenAPI document: 1.0.0
Contact: edson@michaque.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.1.1-SNAPSHOT

=end

require 'cgi'

module Buzi::V1
  class SmsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Cancel a message
    # Returns a single pet
    # @param message_id [Integer] ID of pet to return
    # @param [Hash] opts the optional parameters
    # @return [Message]
    def cancel_message(message_id, opts = {})
      data, _status_code, _headers = cancel_message_with_http_info(message_id, opts)
      data
    end

    # Cancel a message
    # Returns a single pet
    # @param message_id [Integer] ID of pet to return
    # @param [Hash] opts the optional parameters
    # @return [Array<(Message, Integer, Hash)>] Message data, response status code and response headers
    def cancel_message_with_http_info(message_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SmsApi.cancel_message ...'
      end
      # verify the required parameter 'message_id' is set
      if @api_client.config.client_side_validation && message_id.nil?
        fail ArgumentError, "Missing the required parameter 'message_id' when calling SmsApi.cancel_message"
      end
      # resource path
      local_var_path = '/v1/sms/messages/{messageId}/cancel'.sub('{' + 'messageId' + '}', CGI.escape(message_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Message'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuth', 'BasicAuth', 'BearerAuth']

      new_options = opts.merge(
        :operation => :"SmsApi.cancel_message",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SmsApi#cancel_message\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create Message
    # Update an existing pet by Id
    # @param create_message_input [CreateMessageInput] Update an existent pet in the store
    # @param [Hash] opts the optional parameters
    # @return [Message]
    def create_message(create_message_input, opts = {})
      data, _status_code, _headers = create_message_with_http_info(create_message_input, opts)
      data
    end

    # Create Message
    # Update an existing pet by Id
    # @param create_message_input [CreateMessageInput] Update an existent pet in the store
    # @param [Hash] opts the optional parameters
    # @return [Array<(Message, Integer, Hash)>] Message data, response status code and response headers
    def create_message_with_http_info(create_message_input, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SmsApi.create_message ...'
      end
      # verify the required parameter 'create_message_input' is set
      if @api_client.config.client_side_validation && create_message_input.nil?
        fail ArgumentError, "Missing the required parameter 'create_message_input' when calling SmsApi.create_message"
      end
      # resource path
      local_var_path = '/v1/sms/messages'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(create_message_input)

      # return_type
      return_type = opts[:debug_return_type] || 'Message'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuth', 'BasicAuth', 'BearerAuth']

      new_options = opts.merge(
        :operation => :"SmsApi.create_message",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SmsApi#create_message\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create network price
    # Returns a single pet
    # @param network_id [Integer] 
    # @param [Hash] opts the optional parameters
    # @return [Message]
    def create_pricing(network_id, opts = {})
      data, _status_code, _headers = create_pricing_with_http_info(network_id, opts)
      data
    end

    # Create network price
    # Returns a single pet
    # @param network_id [Integer] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Message, Integer, Hash)>] Message data, response status code and response headers
    def create_pricing_with_http_info(network_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SmsApi.create_pricing ...'
      end
      # verify the required parameter 'network_id' is set
      if @api_client.config.client_side_validation && network_id.nil?
        fail ArgumentError, "Missing the required parameter 'network_id' when calling SmsApi.create_pricing"
      end
      # resource path
      local_var_path = '/v1/sms/networks/{networkId}/pricing'.sub('{' + 'networkId' + '}', CGI.escape(network_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Message'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuth', 'BasicAuth', 'BearerAuth']

      new_options = opts.merge(
        :operation => :"SmsApi.create_pricing",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SmsApi#create_pricing\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Deletes a message
    # delete a message
    # @param message_id [Integer] Pet id to delete
    # @param [Hash] opts the optional parameters
    # @option opts [String] :api_key 
    # @return [Error]
    def delete_message(message_id, opts = {})
      data, _status_code, _headers = delete_message_with_http_info(message_id, opts)
      data
    end

    # Deletes a message
    # delete a message
    # @param message_id [Integer] Pet id to delete
    # @param [Hash] opts the optional parameters
    # @option opts [String] :api_key 
    # @return [Array<(Error, Integer, Hash)>] Error data, response status code and response headers
    def delete_message_with_http_info(message_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SmsApi.delete_message ...'
      end
      # verify the required parameter 'message_id' is set
      if @api_client.config.client_side_validation && message_id.nil?
        fail ArgumentError, "Missing the required parameter 'message_id' when calling SmsApi.delete_message"
      end
      # resource path
      local_var_path = '/v1/sms/messages/{messageId}'.sub('{' + 'messageId' + '}', CGI.escape(message_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'api_key'] = opts[:'api_key'] if !opts[:'api_key'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Error'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuth', 'BasicAuth', 'BearerAuth']

      new_options = opts.merge(
        :operation => :"SmsApi.delete_message",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SmsApi#delete_message\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get message
    # Returns a single pet
    # @param message_id [Integer] ID of pet to return
    # @param [Hash] opts the optional parameters
    # @return [Message]
    def get_message(message_id, opts = {})
      data, _status_code, _headers = get_message_with_http_info(message_id, opts)
      data
    end

    # Get message
    # Returns a single pet
    # @param message_id [Integer] ID of pet to return
    # @param [Hash] opts the optional parameters
    # @return [Array<(Message, Integer, Hash)>] Message data, response status code and response headers
    def get_message_with_http_info(message_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SmsApi.get_message ...'
      end
      # verify the required parameter 'message_id' is set
      if @api_client.config.client_side_validation && message_id.nil?
        fail ArgumentError, "Missing the required parameter 'message_id' when calling SmsApi.get_message"
      end
      # resource path
      local_var_path = '/v1/sms/messages/{messageId}'.sub('{' + 'messageId' + '}', CGI.escape(message_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Message'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuth', 'BasicAuth', 'BearerAuth']

      new_options = opts.merge(
        :operation => :"SmsApi.get_message",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SmsApi#get_message\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get network
    # Returns a single pet
    # @param network_id [Integer] 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :country_code ID of pet to return
    # @return [Network]
    def get_network(network_id, opts = {})
      data, _status_code, _headers = get_network_with_http_info(network_id, opts)
      data
    end

    # Get network
    # Returns a single pet
    # @param network_id [Integer] 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :country_code ID of pet to return
    # @return [Array<(Network, Integer, Hash)>] Network data, response status code and response headers
    def get_network_with_http_info(network_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SmsApi.get_network ...'
      end
      # verify the required parameter 'network_id' is set
      if @api_client.config.client_side_validation && network_id.nil?
        fail ArgumentError, "Missing the required parameter 'network_id' when calling SmsApi.get_network"
      end
      # resource path
      local_var_path = '/v1/sms/networks/{networkId}'.sub('{' + 'networkId' + '}', CGI.escape(network_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'country_code'] = opts[:'country_code'] if !opts[:'country_code'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Network'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuth', 'BasicAuth', 'BearerAuth']

      new_options = opts.merge(
        :operation => :"SmsApi.get_network",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SmsApi#get_network\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List network rates
    # Returns a single pet
    # @param network_id [Integer] 
    # @param [Hash] opts the optional parameters
    # @return [Array<Pricing>]
    def get_pricing(network_id, opts = {})
      data, _status_code, _headers = get_pricing_with_http_info(network_id, opts)
      data
    end

    # List network rates
    # Returns a single pet
    # @param network_id [Integer] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Pricing>, Integer, Hash)>] Array<Pricing> data, response status code and response headers
    def get_pricing_with_http_info(network_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SmsApi.get_pricing ...'
      end
      # verify the required parameter 'network_id' is set
      if @api_client.config.client_side_validation && network_id.nil?
        fail ArgumentError, "Missing the required parameter 'network_id' when calling SmsApi.get_pricing"
      end
      # resource path
      local_var_path = '/v1/sms/networks/{networkId}/pricing'.sub('{' + 'networkId' + '}', CGI.escape(network_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<Pricing>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuth', 'BasicAuth', 'BearerAuth']

      new_options = opts.merge(
        :operation => :"SmsApi.get_pricing",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SmsApi#get_pricing\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List messages
    # Update an existing pet by Id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :inbox 
    # @option opts [String] :status 
    # @return [Array<Message>]
    def list_messages(opts = {})
      data, _status_code, _headers = list_messages_with_http_info(opts)
      data
    end

    # List messages
    # Update an existing pet by Id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :inbox 
    # @option opts [String] :status 
    # @return [Array<(Array<Message>, Integer, Hash)>] Array<Message> data, response status code and response headers
    def list_messages_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SmsApi.list_messages ...'
      end
      # resource path
      local_var_path = '/v1/sms/messages'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'inbox'] = opts[:'inbox'] if !opts[:'inbox'].nil?
      query_params[:'status'] = opts[:'status'] if !opts[:'status'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<Message>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuth', 'BasicAuth', 'BearerAuth']

      new_options = opts.merge(
        :operation => :"SmsApi.list_messages",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SmsApi#list_messages\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List networks
    # Returns a single pet
    # @param [Hash] opts the optional parameters
    # @option opts [String] :country_code ID of pet to return
    # @return [Array<Network>]
    def list_networks(opts = {})
      data, _status_code, _headers = list_networks_with_http_info(opts)
      data
    end

    # List networks
    # Returns a single pet
    # @param [Hash] opts the optional parameters
    # @option opts [String] :country_code ID of pet to return
    # @return [Array<(Array<Network>, Integer, Hash)>] Array<Network> data, response status code and response headers
    def list_networks_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SmsApi.list_networks ...'
      end
      # resource path
      local_var_path = '/v1/sms/networks'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'country_code'] = opts[:'country_code'] if !opts[:'country_code'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<Network>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuth', 'BasicAuth', 'BearerAuth']

      new_options = opts.merge(
        :operation => :"SmsApi.list_networks",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SmsApi#list_networks\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Sends a message
    # Returns a single pet
    # @param message_id [Integer] ID of pet to return
    # @param [Hash] opts the optional parameters
    # @return [Message]
    def send_message(message_id, opts = {})
      data, _status_code, _headers = send_message_with_http_info(message_id, opts)
      data
    end

    # Sends a message
    # Returns a single pet
    # @param message_id [Integer] ID of pet to return
    # @param [Hash] opts the optional parameters
    # @return [Array<(Message, Integer, Hash)>] Message data, response status code and response headers
    def send_message_with_http_info(message_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SmsApi.send_message ...'
      end
      # verify the required parameter 'message_id' is set
      if @api_client.config.client_side_validation && message_id.nil?
        fail ArgumentError, "Missing the required parameter 'message_id' when calling SmsApi.send_message"
      end
      # resource path
      local_var_path = '/v1/sms/messages/{messageId}/send'.sub('{' + 'messageId' + '}', CGI.escape(message_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Message'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuth', 'BasicAuth', 'BearerAuth']

      new_options = opts.merge(
        :operation => :"SmsApi.send_message",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SmsApi#send_message\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
